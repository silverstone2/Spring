<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


	   <!-- 
	      JNDI 데이터 소스 객체 얻어오는 설정   
	      Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
	       
	      <Resource name="jdbc/myoracle" auth="Container"
	              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
	              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
	              username="scott" password="tiger" maxTotal="20" maxIdle="10"
	              maxWaitMillis="-1"/> 
	              * DB연동 준비과정 : Servers - context.xml의 자식요소로 붙어넣기         
   		-->
   		<beans:bean id="dataSource" 
			class="org.springframework.jndi.JndiObjectFactoryBean">
			<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
   		</beans:bean>
   		<!-- Spring이 관리하는 Spring Bean Container가 있다 즉, jndi오브젝트팩토리빈이 생성된다는 뜻 -->
   
	   <!-- 
	      위는 아래의 코드와 같다
	      dataSource = new JndiObjectFactoryBean();
	      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
	    -->
   
	   
	   <!-- 
	      SqlSessionFactory 객체 
	      Configuration.xml 문서가 어디에 있는지 알려야 한다. 
	   -->
	   
	   <beans:bean id="sessionFactory" 
	      class="org.mybatis.spring.SqlSessionFactoryBean">
	      <beans:property name="dataSource" ref="dataSource"/>
	      <beans:property name="configLocation"
	   value="classpath:com/gura/step03/mybatis/Configuration.xml"/>
	   </beans:bean>
	   
	   <!-- 
	      sessionFactory=new SqlSessionFactoryBean();
	      sessionFactory.setDataSource(dataSource);
	      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
	    -->
	   
	
	   <!-- 
	      SqlSession 인터페이스를 구현한 
	      SqlSessionTemplate(SqlSession) 객체 
	      Dao 가 의존하는 객체 
	   -->
	   <beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	      <beans:constructor-arg name="sqlSessionFactory" 
	         ref="sessionFactory"/>
	   </beans:bean>
	    
	   <!-- 
	      위의 bean 설정을 java code 로 환산 하면 아래와 같다 
	      
	      dataSource = new JndiObjectFactoryBean();
	      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
	      
	      sessionFactory=new SqlSessionFactoryBean();
	      sessionFactory.setDataSource(dataSource);
	      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
	      
	      new SqlSessionTemplate(sessionFactory); -> Dao에 주입한다. SqlSessionTemplate객체가 구현 SqlSession{} (Interface type)으로 해야함.
	      
	      SqlSessionTemplate객체는 SqlSession{}를 implements 한것임
	      
	      의존 객체를 필요한 시점에 필요한 위치에 주입해준다(Dependency Injection) 통칭 DI [스프링의 핵심 개념] => 의존관계를 느슨하게 해서 유지보수가 용이하게 하기 위함이다
	    -->
	
	
		<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
		
		<!-- Enables the Spring MVC @Controller programming model -->
		<annotation-driven />
	
		<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
		<resources mapping="/resources/**" location="/resources/" />
	
		<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
		<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<beans:property name="prefix" value="/WEB-INF/views/" />
			<beans:property name="suffix" value=".jsp" />
		</beans:bean>
		
		<!-- 
			com.gura.step03 패키지와 그 하위에 있는 모든 패키지를 scan해서
			스프링 bean 컨테이너에 관리할 객체를 생성해서 관리한다.
			
			- scan 도중 @Contoroller, @Service, @Repository, @Component 등의
			어노테이션이 붙어 있는 클래스가 있다면 해당 클래스로 객체를 생성해서
			Spring Bean Container에서 관리를 한다.
		 -->
		<context:component-scan base-package="com.gura.step03" />
		
		
		
</beans:beans>
